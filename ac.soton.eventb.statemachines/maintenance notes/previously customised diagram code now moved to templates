

-------------------------------------------------------------------------------------
These were initially customised in the code but are now moved to the custom templates before the next re-generation
-------------------------------------------------------------------------------------




-----------------

Many of the edit.commands have their doExecuteWithResult method customised to automatically name the new element
E.g. For Any2CreateCommand  
(n.b. Any2CreateCommand is for nested statemachines. without the 2 - AnyCreateCommand - is for the root level canvas.
In fact these two classes are identical).

	/**
	 * @generated NOT
	 */
	protected CommandResult doExecuteWithResult(IProgressMonitor monitor,
			IAdaptable info) throws ExecutionException {
		Any newElement = StatemachinesFactory.eINSTANCE.createAny();

		Statemachine owner = (Statemachine) getElementToEdit();
		owner.getNodes().add(newElement);

		//+++++++++
		String name = NameUtils.getName( (Diagram) newElement.getContaining(DiagramsPackage.Literals.DIAGRAM))+
				"_"+newElement.eClass().getName().toLowerCase();
		name = NameUtils.getSafeName(newElement, name, owner, null);
		newElement.setName(name);
		//---------
		
		doConfigure(newElement, monitor, info);

		((CreateElementRequest) getRequest()).setNewElement(newElement);
		return CommandResult.newOKCommandResult(newElement);
	}

----------------------------------

Validate action did not work when fired from the property sheet
Changed ValidatAction in ac.soton...part to get the active editor instead of the active part
	/**
	 * @generated NOT
	 */
	public void run() {
		IWorkbenchPart workbenchPart = page.getActiveEditor();	
	...

-----------------------------------
re targetting or re-sourcing a transition (if done outside of diagram editors, such as by Rose or refactoring) would 
not delete the old view from the layout resulting in both the old edge and the new edge being drawn.
to fix this, RootStatemachineCanonicalEditPolicy$shouldDeleteView(View view) is modified to check that the 
element's source and target match the edge's 

	
	/**
	 * Return <tt>true</tt> if this editpolicy should try and delete the
	 * supplied view; otherwise <tt>false<tt>. 
	 *  
	 * For transitions, true is returned if the source or target of the view do not represent the semantic source or target resp.
	 * (i.e. if the transition has been moved to a different source or target state)
	 * 
	 * Otherwise the default behavior is returned
	 * 
	 * @CUSTOM
	 */
	protected boolean shouldDeleteView(View view) {
		EObject sel = ViewUtil.resolveSemanticElement(view);
		if (sel instanceof Transition && view instanceof Edge){
			Transition tr = (Transition)sel;
			Edge ed = (Edge)view;
			if (ed.getSource().getElement()!=tr.getSource() || ed.getTarget().getElement()!=tr.getTarget() ){
				return true;
			}			
		}
		return super.shouldDeleteView(view) ;
	}
	
	