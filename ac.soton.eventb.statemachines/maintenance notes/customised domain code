This document shows code that has been customised in the EMF generated code.
----------------------------------------------------------------------------


StatemachinesPackage
This is added:
	/**
	 * Statemachines extension ID, assigned to statemachines extensions to Event-B,
	 * as well as used by transformation to Event-B.
	 */
	String STATEMACHINES_EXTENSION_ID = "ac.soton.eventb.statemachines";


--------------------------

TransitionImpl

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated NOT
	 */
	public EventBElement getSourceContainer() {
		if (sourceContainer != null && sourceContainer.eIsProxy()) {
			InternalEObject oldSourceContainer = (InternalEObject)sourceContainer;
			sourceContainer = (EventBElement)eResolveProxy(oldSourceContainer);
			if (sourceContainer != oldSourceContainer) {
				if (eNotificationRequired())
					eNotify(new ENotificationImpl(this, Notification.RESOLVE, StatemachinesPackage.TRANSITION__SOURCE_CONTAINER, oldSourceContainer, sourceContainer));
			}
		} else if (sourceContainer == null) {
			return getSource();
		}
		return sourceContainer;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated NOT
	 */
	public EventBElement getTargetContainer() {
		if (targetContainer != null && targetContainer.eIsProxy()) {
			InternalEObject oldTargetContainer = (InternalEObject)targetContainer;
			targetContainer = (EventBElement)eResolveProxy(oldTargetContainer);
			if (targetContainer != oldTargetContainer) {
				if (eNotificationRequired())
					eNotify(new ENotificationImpl(this, Notification.RESOLVE, StatemachinesPackage.TRANSITION__TARGET_CONTAINER, oldTargetContainer, targetContainer));
			}
		} else if (targetContainer == null) {
			return getTarget();
		}
		return targetContainer;
	}

	


--------------------------
	
Statemachine

	/**
	 * The default value of the '{@link #getExtensionId() <em>Extension Id</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getExtensionId()
	 * @generated NOT
	 * @ordered
	 */
	protected static final String EXTENSION_ID_EDEFAULT = StatemachinesPackage.STATEMACHINES_EXTENSION_ID;

	/**
	 * The cached value of the '{@link #getExtensionId() <em>Extension Id</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getExtensionId()
	 * @generated NOT
	 * @ordered
	 */
	protected String extensionId = EXTENSION_ID_EDEFAULT+"."+EcoreUtil.generateUUID();


	/**
	 * <!-- begin-user-doc -->
	 * If selfName is still at the default (this), returns this_SMName
	 * Otherwise returns the value of selfName
	 * <!-- end-user-doc -->
	 * @generated NOT
	 */
	public String getSelfName() {
		return "this".equals(selfName)? "this_"+getName() : selfName;
	}


--------------------------
	
State (also similar in Statemachine)

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated NOT
	 */
	public String getName() {
		State refines = getRefines();
		if (refines != null){
			return refines.getName();
		} else return doGetName();
	}

	/**
	 * <!-- begin-user-doc -->
	 * Set the name attribute.
	 * Since : and . are used as delimiters in references which are formed from name, 
	 * these characters are not permitted and are changed automatically
	 * to ; and , respectively.
	 * <!-- end-user-doc -->
	 * @generated NOT
	 */
	public void setName(String newName) {
		if (newName == null) return;		
		String oldName = getName();
		name = newName.replaceAll("\\.", ",").replaceAll(":", ";");
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, StatemachinesPackage.STATE__NAME, oldName, name));
	}
	
	/**
	 * <!-- begin-user-doc -->
	 * On refines change also notify about name change.
	 * <!-- end-user-doc -->
	 * @generated NOT
	 */
	public void setRefines(State newRefines) {
		State oldRefines = refines;
		refines = newRefines;
		if (eNotificationRequired()) {
			eNotify(new ENotificationImpl(this, Notification.SET, StatemachinesPackage.STATE__REFINES, oldRefines, refines));
			eNotify(new ENotificationImpl(this, Notification.SET, StatemachinesPackage.STATE__NAME, oldRefines, refines));
		}
	}
	
	
	
--------------------------
In AbstractNodeImpl, Override getName to use internalID when a name has not been set.
This enables legacy models to continue to work in the new meta-model.

	
		/**
	 * <!-- begin-user-doc -->
	 * return the name (using doGetName()) if it is not null
	 * otherwise return the local id of this node (initialising it if necessary).
	 * This means that users do not have to bother with naming pseudo-states  (usually they are not visible anyway)
	 * unless they want prettier names (e.g. in text representations)
	 * 
	 * note: this method avoids using getInternalID since it will call back getName()
	 * 
	 * <!-- end-user-doc -->
	 * @custom
	 */
	@Override
	public String getName() {
		String name = doGetName();
		
		if ((name==null || name.length()==0) &&						// THIS IS A TEMPORARY MEASURE TO
				(internalId != null && internalId.length()>0)){		// SUPPORT LEGACY MODELS THAT USED
			return internalId;										// internalId FOR REFERENCING PSEUDO-STATES
		}
		
		return name;
	}
	
	
	
	--------------------------
	
	
--------------------------
	
StatemachinesValidator

populate all the Validate operations

--------------------------



