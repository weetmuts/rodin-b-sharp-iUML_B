/*
 * Copyright (c) 2007, 2010 Borland Software Corporation and others
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Alexander Shatalin (Borland) - initial API and implementation
 *    Artem Tikhomirov             - refactoring of containerBaseCanonicalMethods.xpt; extraction of API/non-API of CEP templates
 */

«IMPORT 'http://www.eclipse.org/gmf/2009/GenModel'»
«IMPORT 'http://www.eclipse.org/emf/2002/GenModel'»

«EXTENSION xpt::diagram::updater::Utils»

«DEFINE body FOR gmfgen::GenContainerBase-»
	«EXPAND attributes-»

	«EXPAND refreshOnActivateMethod-»

	«EXPAND getFeaturesToSynchronizeMethod-»
	
	«EXPAND getSemanticChildrenListMethod-»

	«EXPAND isOrphanedMethod-»

	«EXPAND isMyDiagramElementMethod-»
	
	«EXPAND isShortcutMethod-»
«ENDDEFINE»

// used to be package-local field
«DEFINE attributes FOR gmfgen::GenContainerBase-»
«IF getSemanticChildrenContainmentFeatures(self)->size() > 1-»

	«EXPAND xpt::Common::generatedMemberComment»
	private «EXPAND CodeStyle::G('java.util.Set', 'org.eclipse.emf.ecore.EStructuralFeature')» myFeaturesToSynchronize;
«ENDIF-»
«ENDDEFINE»

«REM»
	The canonical update mechanism of the GMF Runtime heavily depends on EditPart listeners being registered
	prior to actual canonical update (thus, any change from this policy gets known to the interested EditParts.
	NodeEditPart.activate() installs a transaction post-commit listener that refreshes the edit part. Canonical EditPolicy 
	is installed on a top (diagram) element, and its activation happens before diagram children get activated (and have a chance
	to install their listeners). Hence this what I believe to be an questionable hack (at least, GEF's 
	activation sequence gets violated). See bugzilla https://bugs.eclipse.org/bugs/show_bug.cgi?id=314670  
«ENDREM»
«DEFINE refreshOnActivateMethod FOR gmfgen::GenContainerBase-»
	«EXPAND xpt::Common::generatedMemberComment»
	protected void refreshOnActivate() {
		// Need to activate editpart children before invoking the canonical refresh for EditParts to add event listeners
		«EXPAND CodeStyle::G('java.util.List', '?')» c = getHost().getChildren();
		for (int i = 0; i < c.size(); i++) {
			((org.eclipse.gef.EditPart) c.get(i)).activate();
		}
		super.refreshOnActivate();
	}
«ENDDEFINE»

«DEFINE getFeaturesToSynchronizeMethod FOR gmfgen::GenContainerBase-»
«IF getSemanticChildrenChildFeatures(self)->size() = 1-»

	«EXPAND xpt::Common::generatedMemberComment»
	protected org.eclipse.emf.ecore.EStructuralFeature getFeatureToSynchronize() {
		return «EXPAND MetaModel::MetaFeature FOR getSemanticChildrenContainmentFeatures(self)->any(true)»;
	}
«ELSEIF getSemanticChildrenChildFeatures(self)->size() > 1-»

	«EXPAND xpt::Common::generatedMemberComment»
	protected java.util.Set getFeaturesToSynchronize() {
		if (myFeaturesToSynchronize == null) {
			myFeaturesToSynchronize = new «EXPAND CodeStyle::G('java.util.HashSet', 'org.eclipse.emf.ecore.EStructuralFeature')»();
			«EXPAND _addContainmentFeature FOREACH getSemanticChildrenContainmentFeatures(self)-»
		}
		return myFeaturesToSynchronize;
	}
«ENDIF-»
«ENDDEFINE»

«DEFINE getSemanticChildrenListMethod FOR gmfgen::GenContainerBase-»
«EXPAND xpt::Common::generatedMemberComment»
«EXPAND CodeStyle::SuppressWarnings('"rawtypes"')»
protected java.util.List getSemanticChildrenList() {
	«IF hasSemanticChildren(self) /*REVISIT: is there real need for this check - Generator seems to consult needsCanonicalEP, which in turns ensures there are semantic children?*/-»
	org.eclipse.gmf.runtime.notation.View viewObject = (org.eclipse.gmf.runtime.notation.View) getHost().getModel();
	«EXPAND CodeStyle::newGenericInstance('result', 'java.util.LinkedList', 'org.eclipse.emf.ecore.EObject')»();
	«EXPAND CodeStyle::G('java.util.List', getDiagram().editorGen.diagramUpdater.getNodeDescriptorQualifiedClassName())» childDescriptors = «EXPAND xpt::diagram::updater::DiagramUpdater::getSemanticChildrenMethodCall»(viewObject);
	«EXPAND CodeStyle::iterate('d', getDiagram().editorGen.diagramUpdater.getNodeDescriptorQualifiedClassName(), 'childDescriptors')-»
		result.add(d.getModelElement());
	}
	return result;
	«ELSE-»
	return java.util.Collections.EMPTY_LIST;
	«ENDIF-»
}
«ENDDEFINE»

«DEFINE isShortcutMethod FOR gmfgen::GenContainerBase»«ENDDEFINE»
«DEFINE isShortcutMethod FOR gmfgen::GenDiagram-»
«IF containsShortcutsTo->notEmpty()-»
«EXPAND xpt::Common::generatedMemberComment»
protected static boolean isShortcut(org.eclipse.gmf.runtime.notation.View view) {
	return view.getEAnnotation("Shortcut") != null; «EXPAND xpt::Common::nonNLS»
}
«ENDIF»
«ENDDEFINE»

«DEFINE isOrphanedMethod FOR gmfgen::GenContainerBase-»
«EXPAND xpt::Common::generatedMemberComment»
protected boolean isOrphaned(«EXPAND CodeStyle::G('java.util.Collection', 'org.eclipse.emf.ecore.EObject')» semanticChildren, final org.eclipse.gmf.runtime.notation.View view) {
	«IF self.oclIsKindOf(gmfgen::GenDiagram) and self.oclAsType(gmfgen::GenDiagram).containsShortcutsTo->notEmpty()-»
		if (isShortcut(view)) {
			return «getDiagram().editorGen.diagramUpdater.getDiagramUpdaterQualifiedClassName()».isShortcutOrphaned(view);
		}
	«ENDIF-»
	return isMyDiagramElement(view) && !semanticChildren.contains(view.getElement());
}
«ENDDEFINE»

«DEFINE isMyDiagramElementMethod FOR gmfgen::GenContainerBase-»
«EXPAND xpt::Common::generatedMemberComment»
private boolean isMyDiagramElement(org.eclipse.gmf.runtime.notation.View view) {
«LET getSemanticChildren(self)->size() AS semanticChildrenSize-»
	«IF semanticChildrenSize = 0 /* shall not happen, provided #needsCanonicalEditPolicy is correct */-»
	return false;
	«ELSEIF semanticChildrenSize = 1-»
	return «EXPAND xpt::editor::VisualIDRegistry::visualID FOR getSemanticChildren(self)->first()» == «EXPAND xpt::editor::VisualIDRegistry::getVisualIDMethodCall FOR getDiagram()»(view);
	«ELSE-»
	int visualID = «EXPAND xpt::editor::VisualIDRegistry::getVisualIDMethodCall FOR getDiagram()»(view);
	«IF semanticChildrenSize > 3 /* do not produce switch statement for short lists */-»
	switch (visualID) {
		«EXPAND xpt::Common::caseVisualID FOREACH getSemanticChildren(self)»
		return true;
	}
	return false;
	«ELSE-»
	return visualID == «EXPAND xpt::editor::VisualIDRegistry::visualID FOREACH getSemanticChildren(self) SEPARATOR ' || visualID == '»; 
	«ENDIF-»
	«ENDIF-»
«ENDLET-»
}
«ENDDEFINE»

//
// accessible from outside

// Alternative implementation of CEP.refreshSemanticChildren
«DEFINE refreshSemanticChildren(String createdViewsVar, gmfgen::GenDiagramUpdater diagramUpdater) FOR gmfgen::GenContainerBase-»
«LET hasConformableSemanticChildren(self) AS childrenShareSameMetaclass-»
		«EXPAND CodeStyle::G('java.util.List', diagramUpdater.getNodeDescriptorQualifiedClassName())» childDescriptors = «-» 
			«IF hasSemanticChildren(self) /*REVISIT: is there real need for this check - Generator seems to consult needsCanonicalEP, which in turns ensures there are semantic children?, but with respect to #352271*/-»
				«EXPAND xpt::diagram::updater::DiagramUpdater::getSemanticChildrenMethodCall»((org.eclipse.gmf.runtime.notation.View) getHost().getModel());
			«ELSE-»
				/* see #352271 */ «EXPAND CodeStyle::emptyList»;
			«ENDIF-»
		«EXPAND CodeStyle::newGenericInstance('orphaned', 'java.util.LinkedList', 'org.eclipse.gmf.runtime.notation.View')»();
		«LET self.oclIsKindOf(gmfgen::GenDiagram) and self.oclAsType(gmfgen::GenDiagram).containsShortcutsTo->notEmpty() AS safeHasShortcuts-»
		// we care to check only views we recognize as ours«IF safeHasShortcuts» and not shortcuts«ENDIF»
		«EXPAND CodeStyle::newGenericInstance('knownViewChildren', 'java.util.LinkedList', 'org.eclipse.gmf.runtime.notation.View')»();
		«EXPAND CodeStyle::iterate('v', 'org.eclipse.gmf.runtime.notation.View', 'getViewChildren()')-»
«IF safeHasShortcuts-»
			if (isShortcut(v)) {
				if («getDiagram().editorGen.diagramUpdater.getDiagramUpdaterQualifiedClassName()».isShortcutOrphaned(v)) {
					orphaned.add(v);
				}
				continue;
			} 
«ENDIF-»
			if (isMyDiagramElement(v)) {
				knownViewChildren.add(v);
			}
		}
		«ENDLET-»
		// alternative to #cleanCanonicalSemanticChildren(getViewChildren(), semanticChildren)
		«IF childrenShareSameMetaclass-»
		«EXPAND CodeStyle::newGenericInstance2('potentialViews', 'java.util.HashMap', diagramUpdater.getNodeDescriptorQualifiedClassName(), 'java.util.LinkedList', 'org.eclipse.gmf.runtime.notation.View')»();
		«ENDIF-»
		//
		// iteration happens over list of desired semantic elements, trying to find best matching View, while original CEP
		// iterates views, potentially losing view (size/bounds) information - i.e. if there are few views to reference same EObject, only last one 
		// to answer isOrphaned == true will be used for the domain element representation, see #cleanCanonicalSemanticChildren()
		«EXPAND CodeStyle::iterate('next', diagramUpdater.getNodeDescriptorQualifiedClassName(), 'descriptorsIterator', 'childDescriptors.iterator()')-»
			String hint = «EXPAND xpt::editor::VisualIDRegistry::typeMethodCall('next.getVisualID()')»;
			«EXPAND CodeStyle::newGenericInstance('perfectMatch', 'java.util.LinkedList', 'org.eclipse.gmf.runtime.notation.View')»(); // both semanticElement and hint match that of NodeDescriptor
			«IF childrenShareSameMetaclass-»
			«EXPAND CodeStyle::newGenericInstance('potentialMatch', 'java.util.LinkedList', 'org.eclipse.gmf.runtime.notation.View')»(); // semanticElement matches, hint does not
			«ENDIF-»
			«EXPAND CodeStyle::iterate('childView', 'org.eclipse.gmf.runtime.notation.View', 'getViewChildren()')-»
				org.eclipse.emf.ecore.EObject semanticElement = childView.getElement();
				if (next.getModelElement().equals(semanticElement)) {
					if (hint.equals(childView.getType())) {
						perfectMatch.add(childView);
						// actually, can stop iteration over view children here, but
						// may want to use not the first view but last one as a 'real' match (the way original CEP does
						// with its trick with viewToSemanticMap inside #cleanCanonicalSemanticChildren
					«IF childrenShareSameMetaclass-»
					} else {
						potentialMatch.add(childView);
					«ENDIF-»
					}
					«REM» do not break, loop through all potential view children in hope there would be precise match«ENDREM»«-»
				}
			}
			if (perfectMatch.size() > 0) {
				descriptorsIterator.remove(); // precise match found no need to create anything for the NodeDescriptor
				// use only one view (first or last?), keep rest as orphaned for further consideration
				knownViewChildren.remove(perfectMatch.getFirst());
			«IF childrenShareSameMetaclass-»
			} else if (potentialMatch.size() > 0) {
				«REM»
					Bug 224206 -  Support switching figure of EditPart with domain element property change: need to create new view for the node descriptor and copy old attributes.
					To address this, old implementation tries to change VID of the first View known to reference same semantic element
					but it is possible some potentialMatch would be perfectMatch for later NodeDescriptor
				«ENDREM»«-»
				potentialViews.put(next, potentialMatch); 
			«ENDIF-»
			}
		}
		// those left in knownViewChildren are subject to removal - they are our diagram elements we didn't find match to,
		// or those we have potential matches to, and thus need to be recreated, preserving size/location information.
		orphaned.addAll(knownViewChildren);
		//
		«IF childrenShareSameMetaclass-»
		org.eclipse.gmf.runtime.emf.commands.core.command.CompositeTransactionalCommand boundsCommand = new org.eclipse.gmf.runtime.emf.commands.core.command.CompositeTransactionalCommand(host().getEditingDomain(), org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramUIMessages.SetLocationCommand_Label_Resize);
		«ENDIF-»
		«EXPAND CodeStyle::newGenericInstance('viewDescriptors', 'java.util.ArrayList', 'org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest.ViewDescriptor')»(childDescriptors.size());		
		«EXPAND CodeStyle::iterate('next', diagramUpdater.getNodeDescriptorQualifiedClassName(), 'childDescriptors')-»
			String hint = «EXPAND xpt::editor::VisualIDRegistry::typeMethodCall('next.getVisualID()')»;
			org.eclipse.core.runtime.IAdaptable elementAdapter = new CanonicalElementAdapter(next.getModelElement(), hint);
			org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest.ViewDescriptor descriptor = new org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest.ViewDescriptor(elementAdapter, org.eclipse.gmf.runtime.notation.Node.class, hint, org.eclipse.gmf.runtime.diagram.core.util.ViewUtil.APPEND, false, host().getDiagramPreferencesHint());
			viewDescriptors.add(descriptor);
		«IF childrenShareSameMetaclass /*code to preserve bounds makes sense only when there are children of same metaclass that may have distinctive attribute changed */-»
			«REM»XXX: IN FACT, we should generate this code IFF child nodes are shapes - no sense to expect bounds in comparments. ASK Vano«ENDREM»
			«EXPAND CodeStyle::G('java.util.LinkedList', 'org.eclipse.gmf.runtime.notation.View')» possibleMatches = «EXPAND CodeStyle::castTyped('java.util.LinkedList')»potentialViews.get(next);
			if (possibleMatches != null) {
				// from potential matches, leave those that were not eventually used for some other NodeDescriptor (i.e. those left as orphaned)
				possibleMatches.retainAll(knownViewChildren);
			}
			if (possibleMatches != null && !possibleMatches.isEmpty()) {
				org.eclipse.gmf.runtime.notation.View originalView = «EXPAND CodeStyle::castTyped('org.eclipse.gmf.runtime.notation.View')»possibleMatches.getFirst();
				knownViewChildren.remove(originalView); // remove not to copy properties of the same view again and again
				// add command to copy properties
				if (originalView instanceof org.eclipse.gmf.runtime.notation.Node) {
					if (((org.eclipse.gmf.runtime.notation.Node) originalView).getLayoutConstraint() instanceof org.eclipse.gmf.runtime.notation.Bounds) {
						org.eclipse.gmf.runtime.notation.Bounds b = (org.eclipse.gmf.runtime.notation.Bounds) ((org.eclipse.gmf.runtime.notation.Node) originalView).getLayoutConstraint();
						boundsCommand.add(new org.eclipse.gmf.runtime.diagram.ui.commands.SetBoundsCommand(boundsCommand.getEditingDomain(), boundsCommand.getLabel(), descriptor, new org.eclipse.draw2d.geometry.Rectangle(b.getX(), b.getY(), b.getWidth(), b.getHeight())));
					} else if (((org.eclipse.gmf.runtime.notation.Node) originalView).getLayoutConstraint() instanceof org.eclipse.gmf.runtime.notation.Location) {
						org.eclipse.gmf.runtime.notation.Location l = (org.eclipse.gmf.runtime.notation.Location) ((org.eclipse.gmf.runtime.notation.Node) originalView).getLayoutConstraint();
						boundsCommand.add(new org.eclipse.gmf.runtime.diagram.ui.commands.SetBoundsCommand(boundsCommand.getEditingDomain(), boundsCommand.getLabel(), descriptor, new org.eclipse.draw2d.geometry.Point(l.getX(), l.getY())));
					} else if (((org.eclipse.gmf.runtime.notation.Node) originalView).getLayoutConstraint() instanceof org.eclipse.gmf.runtime.notation.Size) {
						org.eclipse.gmf.runtime.notation.Size s = (org.eclipse.gmf.runtime.notation.Size) ((org.eclipse.gmf.runtime.notation.Node) originalView).getLayoutConstraint();
						boundsCommand.add(new org.eclipse.gmf.runtime.diagram.ui.commands.SetBoundsCommand(boundsCommand.getEditingDomain(), boundsCommand.getLabel(), descriptor, new org.eclipse.draw2d.geometry.Dimension(s.getWidth(), s.getHeight())));
					}
					«REM»
					   Note, we don't support Ratio update (as it was done in #populateViewProperties). 
					   First, SetCompartmentRatioCommand is internal; second reason - I don't believe we generate CEP to update compartments
					   
					   FIXME However, makes sense to extract this piece for potential extensions.
					«ENDREM»«-»
				}
			}
		«ENDIF-»
		}

		boolean changed = deleteViews(orphaned.iterator());
		//
		org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest request = getCreateViewRequest(viewDescriptors);
		org.eclipse.gef.commands.Command cmd = getCreateViewCommand(request);
		if (cmd != null && cmd.canExecute() ) {
			org.eclipse.gmf.runtime.diagram.ui.commands.SetViewMutabilityCommand.makeMutable(new org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter(host().getNotationView())).execute();
			executeCommand(cmd);
			«IF childrenShareSameMetaclass»if (boundsCommand.canExecute()) {
				executeCommand(new org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy(boundsCommand.reduce()));
			}
			«ENDIF-»
			«EXPAND CodeStyle::SuppressWarnings('"unchecked"')»
			«EXPAND CodeStyle::G('java.util.List', 'org.eclipse.core.runtime.IAdaptable')» nl = («EXPAND CodeStyle::G('java.util.List', 'org.eclipse.core.runtime.IAdaptable')») request.getNewObject();
			«createdViewsVar».addAll(nl);
		}
		if (changed || «createdViewsVar».size() > 0) {
			postProcessRefreshSemantic(createdViews);
		}
«ENDLET-»
«ENDDEFINE»

«DEFINE executeLayoutCommand(String createdViewsVar) FOR gmfgen::GenContainerBase-»
	if («createdViewsVar».size() > 1) {
		// perform a layout of the container
		org.eclipse.gmf.runtime.diagram.ui.commands.DeferredLayoutCommand layoutCmd = new org.eclipse.gmf.runtime.diagram.ui.commands.DeferredLayoutCommand(host().getEditingDomain(), «createdViewsVar», host());
		executeCommand(new org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy(layoutCmd));
	}
«ENDDEFINE»

«DEFINE refreshConnectionsBody FOR gmfgen::GenDiagram-»
	«EXPAND _Domain2Notation» domain2NotationMap = new «EXPAND _Domain2Notation»();
	«EXPAND CodeStyle::G('java.util.Collection', editorGen.diagramUpdater.getLinkDescriptorQualifiedClassName())» linkDescriptors = collectAllLinks(getDiagram(), domain2NotationMap);
	java.util.Collection existingLinks = new java.util.LinkedList(getDiagram().getEdges());
	for (java.util.Iterator linksIterator = existingLinks.iterator(); linksIterator.hasNext();) {
		org.eclipse.gmf.runtime.notation.Edge nextDiagramLink = (org.eclipse.gmf.runtime.notation.Edge) linksIterator.next();
		int diagramLinkVisualID = «EXPAND xpt::editor::VisualIDRegistry::getVisualIDMethodCall»(nextDiagramLink);
		if (diagramLinkVisualID == -1«EXPAND _compareLinkVisualID FOREACH links->select(gl | gl.modelFacet.oclIsUndefined())») {
			if (nextDiagramLink.getSource() != null && nextDiagramLink.getTarget() != null) {
				linksIterator.remove();
			}
			continue;
		}
		org.eclipse.emf.ecore.EObject diagramLinkObject = nextDiagramLink.getElement();
		org.eclipse.emf.ecore.EObject diagramLinkSrc = nextDiagramLink.getSource().getElement();
		org.eclipse.emf.ecore.EObject diagramLinkDst = nextDiagramLink.getTarget().getElement();
		«EXPAND CodeStyle::iterate('nextLinkDescriptor', editorGen.diagramUpdater.getLinkDescriptorQualifiedClassName(), 'linkDescriptorsIterator', 'linkDescriptors.iterator()')-»
			if (diagramLinkObject == nextLinkDescriptor.getModelElement() && diagramLinkSrc == nextLinkDescriptor.getSource() && diagramLinkDst == nextLinkDescriptor.getDestination() && diagramLinkVisualID == nextLinkDescriptor.getVisualID()) {
				linksIterator.remove();
				linkDescriptorsIterator.remove();
				break;
			}
		}
	}
	deleteViews(existingLinks.iterator());
	return createConnections(linkDescriptors, domain2NotationMap);
«ENDDEFINE»

«DEFINE refreshConnectionsAuxMethods FOR gmfgen::GenDiagram-»
	«EXPAND collectAllLinksMethod-»
	«EXPAND createConnectionsMethod-»
	«EXPAND getEditPartMethod-»
	«EXPAND getDiagramMethod-»
	«EXPAND getSourceEditPartMethod-»
	«EXPAND getTargetEditPartMethod-»
	«EXPAND getHintedEditPartMethod-»
«ENDDEFINE»

«DEFINE collectAllLinksMethod FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
private «EXPAND CodeStyle::G('java.util.Collection', editorGen.diagramUpdater.getLinkDescriptorQualifiedClassName())» collectAllLinks(org.eclipse.gmf.runtime.notation.View view, «EXPAND _Domain2Notation» domain2NotationMap) {
	if (!«EXPAND xpt::editor::VisualIDRegistry::modelID».equals(«EXPAND xpt::editor::VisualIDRegistry::getModelIDMethodCall»(view))) {
		return «EXPAND CodeStyle::emptyList»;
	}
	«EXPAND CodeStyle::newGenericInstance('result', 'java.util.LinkedList', editorGen.diagramUpdater.getLinkDescriptorQualifiedClassName())»();
	switch («EXPAND xpt::editor::VisualIDRegistry::getVisualIDMethodCall»(view)) {
		«EXPAND _caseSemanticElement FOREACH getAllSemanticElements(self)-»
	}
	for (java.util.Iterator children = view.getChildren().iterator(); children.hasNext();) {
		result.addAll(collectAllLinks((org.eclipse.gmf.runtime.notation.View) children.next(), domain2NotationMap));
	}
	for (java.util.Iterator edges = view.getSourceEdges().iterator(); edges.hasNext();) {
		result.addAll(collectAllLinks((org.eclipse.gmf.runtime.notation.View) edges.next(), domain2NotationMap));
	}
	return result;
}
«ENDDEFINE»

«DEFINE createConnectionsMethod FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
private «EXPAND CodeStyle::G('java.util.Collection', 'org.eclipse.core.runtime.IAdaptable')»  createConnections(«EXPAND CodeStyle::G('java.util.Collection', editorGen.diagramUpdater.getLinkDescriptorQualifiedClassName())» linkDescriptors, «EXPAND _Domain2Notation» domain2NotationMap) {
	«EXPAND CodeStyle::newGenericInstance('adapters', 'java.util.LinkedList', 'org.eclipse.core.runtime.IAdaptable')»();
	«EXPAND CodeStyle::iterate('nextLinkDescriptor', editorGen.diagramUpdater.getLinkDescriptorQualifiedClassName(), 'linkDescriptors')-»
		org.eclipse.gef.EditPart sourceEditPart = getSourceEditPart(nextLinkDescriptor, domain2NotationMap);
		org.eclipse.gef.EditPart targetEditPart = getTargetEditPart(nextLinkDescriptor, domain2NotationMap);
		if (sourceEditPart == null || targetEditPart == null) {
			continue;
		}
		org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectionViewRequest.ConnectionViewDescriptor descriptor = new org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectionViewRequest.ConnectionViewDescriptor(nextLinkDescriptor.getSemanticAdapter(), «EXPAND xpt::editor::VisualIDRegistry::typeMethodCall('nextLinkDescriptor.getVisualID()')», org.eclipse.gmf.runtime.diagram.core.util.ViewUtil.APPEND, false, ((org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart) getHost()).getDiagramPreferencesHint());
		org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectionViewRequest ccr = new org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectionViewRequest(descriptor);
		ccr.setType(org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants.REQ_CONNECTION_START);
		ccr.setSourceEditPart(sourceEditPart);
		sourceEditPart.getCommand(ccr);
		ccr.setTargetEditPart(targetEditPart);
		ccr.setType(org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants.REQ_CONNECTION_END);
		org.eclipse.gef.commands.Command cmd = targetEditPart.getCommand(ccr);
		if (cmd != null && cmd.canExecute()) {
			executeCommand(cmd);
			org.eclipse.core.runtime.IAdaptable viewAdapter = (org.eclipse.core.runtime.IAdaptable) ccr.getNewObject();
			if (viewAdapter != null) {
				adapters.add(viewAdapter);
			}
		}
	}
	return adapters;
}
«ENDDEFINE»

«DEFINE getEditPartMethod FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
private org.eclipse.gef.EditPart getEditPart(org.eclipse.emf.ecore.EObject domainModelElement, «EXPAND _Domain2Notation» domain2NotationMap) {
	org.eclipse.gmf.runtime.notation.View view = (org.eclipse.gmf.runtime.notation.View) domain2NotationMap.get(domainModelElement);
	if (view != null) {
		return (org.eclipse.gef.EditPart) getHost().getViewer().getEditPartRegistry().get(view);
	}
	return null;
}
«ENDDEFINE»

«DEFINE getHintedEditPartMethod FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
protected final org.eclipse.gef.EditPart getHintedEditPart(org.eclipse.emf.ecore.EObject domainModelElement, «EXPAND _Domain2Notation» domain2NotationMap, int hintVisualId) { 
	org.eclipse.gmf.runtime.notation.View view = (org.eclipse.gmf.runtime.notation.View) domain2NotationMap.getHinted(domainModelElement, «-»
											«EXPAND xpt::editor::VisualIDRegistry::typeMethodCall('hintVisualId')»);
	if (view != null) {
		return (org.eclipse.gef.EditPart) getHost().getViewer().getEditPartRegistry().get(view);
	}
	return null;
}
«ENDDEFINE»

«DEFINE getSourceEditPartMethod FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
private org.eclipse.gef.EditPart getSourceEditPart(org.eclipse.gmf.tooling.runtime.update.UpdaterLinkDescriptor descriptor, «EXPAND _Domain2Notation» domain2NotationMap) { 
	return getEditPart(descriptor.getSource(), domain2NotationMap);
}
«ENDDEFINE»

«DEFINE getTargetEditPartMethod FOR gmfgen::GenDiagram-»
	«EXPAND xpt::Common::generatedMemberComment»
private org.eclipse.gef.EditPart getTargetEditPart(org.eclipse.gmf.tooling.runtime.update.UpdaterLinkDescriptor descriptor, «EXPAND _Domain2Notation» domain2NotationMap) { 
	return getEditPart(descriptor.getDestination(), domain2NotationMap);
}
«ENDDEFINE»


«DEFINE getDiagramMethod FOR gmfgen::GenContainerBase-»
«EXPAND xpt::Common::generatedMemberComment»
private org.eclipse.gmf.runtime.notation.Diagram getDiagram() {
	return ((org.eclipse.gmf.runtime.notation.View) getHost().getModel()).getDiagram();
}
«ENDDEFINE»



//
// privates

«DEFINE _Domain2Notation FOR gmfgen::GenDiagram»«EXPAND impl::diagram::update::domain2notation::DomainToNotationClassName»«ENDDEFINE»

«DEFINE _addContainmentFeature FOR genmodel::GenFeature-»
myFeaturesToSynchronize.add(«EXPAND MetaModel::MetaFeature»);
«ENDDEFINE»

«DEFINE _compareLinkVisualID FOR gmfgen::GenLink» || diagramLinkVisualID == «EXPAND xpt::editor::VisualIDRegistry::visualID»«ENDDEFINE»

«REM»GMF has no links to "leaf" child nodes.«ENDREM»
«DEFINE _caseSemanticElement FOR gmfgen::GenChildLabelNode»«ENDDEFINE»
«DEFINE _caseSemanticElement FOR gmfgen::GenCommonBase-»
«EXPAND xpt::Common::caseVisualID» {
	if (!domain2NotationMap.containsKey(view.getElement())) {
«REM»
	Processing each domain element only once. Prevents us from 
	having duplicated links if a shortcut to one of the "main"
	diagram elements present on diagram.
«ENDREM»«-»
		result.addAll(«EXPAND xpt::diagram::updater::DiagramUpdater::getContainedLinksMethodCall»(view));
	}
	domain2NotationMap.putView(view.getElement(), view);
	break;	
}
«ENDDEFINE»

«REM»MY: method overrides for CanonicalConnectionEditPolicy«ENDREM»
«DEFINE canonicalConnectionEditPolicyOverrideMethods FOR gmfgen::GenDiagram-»
	«EXPAND getSemanticConnectionsListMethod-»
	«EXPAND getSourceElementMethod-»
	«EXPAND getTargetElementMethod-»
	«EXPAND shouldDeleteViewMethod-»
«ENDDEFINE»

«REM»MY: «ENDREM»
«DEFINE getSemanticConnectionsListMethod FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
@Override
protected «EXPAND CodeStyle::G('java.util.List', 'org.eclipse.emf.ecore.EObject')» getSemanticConnectionsList() {
	«EXPAND CodeStyle::G('java.util.List', 'org.eclipse.emf.ecore.EObject')» connections = new «EXPAND CodeStyle::G('java.util.LinkedList', 'org.eclipse.emf.ecore.EObject')»();
	«EXPAND CodeStyle::G('org.eclipse.emf.common.util.TreeIterator', 'Object')» it = org.eclipse.emf.ecore.util.EcoreUtil.getAllContents(getDiagram().getElement(), true);
	while (it.hasNext()) {
		Object child = it.next();
		if (child instanceof ac.soton.eventb.statemachines.Transition)
			connections.add((org.eclipse.emf.ecore.EObject) child);
	}
	return connections;
}
«ENDDEFINE»

«REM»MY: «ENDREM»
«DEFINE getSourceElementMethod FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
@Override
protected org.eclipse.emf.ecore.EObject getSourceElement(org.eclipse.emf.ecore.EObject relationship) {
	if (relationship instanceof ac.soton.eventb.statemachines.Transition)
		return ((ac.soton.eventb.statemachines.Transition) relationship).getSource();
	return null;
}
«ENDDEFINE»

«REM»MY: «ENDREM»
«DEFINE getTargetElementMethod FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
@Override
protected org.eclipse.emf.ecore.EObject getTargetElement(org.eclipse.emf.ecore.EObject relationship) {
	if (relationship instanceof ac.soton.eventb.statemachines.Transition)
		return ((ac.soton.eventb.statemachines.Transition) relationship).getTarget();
	return null;
}
«ENDDEFINE»

«REM»CFS: shouldDeleteView is overriden to return true if the transition has been moved to different source or target«ENDREM»
«DEFINE shouldDeleteViewMethod FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment(
	'Return <i>true</i> if this editpolicy should delete the supplied view otherwise <i>false</i>.\n'+ 
	'For transitions, <i>true</i> is returned if the source or target of the view do not represent the semantic source or target resp.\n'+
	'(i.e. if the transition has been moved to a different source or target state). Otherwise the default behavior is returned\n'
	)»
@Override
protected boolean shouldDeleteView(org.eclipse.gmf.runtime.notation.View view) {
org.eclipse.emf.ecore.EObject sel = org.eclipse.gmf.runtime.diagram.core.util.ViewUtil.resolveSemanticElement(view);
	if (sel instanceof ac.soton.eventb.statemachines.Transition && view instanceof org.eclipse.gmf.runtime.notation.Edge) {
		ac.soton.eventb.statemachines.Transition tr = (ac.soton.eventb.statemachines.Transition) sel;
		org.eclipse.gmf.runtime.notation.Edge ed = (org.eclipse.gmf.runtime.notation.Edge) view;
		if (ed.getSource().getElement() != tr.getSource()
			|| ed.getTarget().getElement() != tr.getTarget()) {
			return true;
		}
	}
	return super.shouldDeleteView(view);
}
«ENDDEFINE»
